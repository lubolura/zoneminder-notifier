#!/usr/bin/env python3

import sys
import time
import cv2
import zm_util
from zm_api import ZMAPI
from zm_settings import Settings
from zm_monitor import Monitor
import zm_object_detection as Detectors
from zm_notification import Notification


def resize_image(frame, dim, preserve_aspect=False):
    '''Resize an image with the option to preserve aspect ratio'''
    dimw = dim[0]
    dimh = dim[1]
    if preserve_aspect:
        h, w = frame.shape[:2]
        aspect = w/h
        if w > h:
            dimh = round(dimw/aspect)
        else:
            dimw = round(dimh/aspect)
    imsize = (dimw, dimh)
    return cv2.resize(frame, imsize)


if __name__ == "__main__":
    ################################################################################################
    # Setup
    ################################################################################################

    # Read config file static sections (all except monitors)
    st = Settings("/etc/zm_notifier.cfg")

    #  Log in to API and get list of all monitors
    zmapi = ZMAPI(st.local_server_address, st.username, st.password, st.world_server_address,
                  st.verify_ssl)
    if not zmapi.login():
        zm_util.debug("Login to the ZoneMinder API failed.", "stderr")
        sys.exit(1)

    # Read monitors settings
    api_monitors = zmapi.getMonitors()
    st.readMonitorSettings(api_monitors)

    # Set up notifiers
    notifier = Notification()

    # Set up object detection
    monitors = []
    for api_mon in api_monitors:
        # Reference to settings for this monitor
        mname = api_mon["name"]
        mid = api_mon["id"]
        ms = st.monitors[mname]

        # Set up the object detector for this monitor
        if ms["detect_objects"]:
            if ms["detection_model"] == "Darknet":
                classes_path = st.darknet_classes
                detector = Detectors.DetectorDarknet(mname, st.darknet_config, st.darknet_model,
                           ms["detect_classes"], ms["confidence_threshold"],
                           analysis_size=st.darknet_analysis_size)
            elif ms["detection_model"] == "MobileNetV3":
                classes_path = st.mobilenet_classes
                detector = Detectors.DetectorSSDMobileNetV3(mname, st.mobilenet_config,
                           st.mobilenet_model, ms["detect_classes"], ms["confidence_threshold"])
            elif ms["detection_model"] == "InceptionV2":
                classes_path = st.inception_classes
                detector = Detectors.DetectorTensorFlow(mname, st.inception_config,
                           st.inception_model, ms["detect_classes"], ms["confidence_threshold"],
                           analysis_size=st.inception_analysis_size)
            elif ms["detection_model"] == "HOG":
                classes_path = ""
                detector = Detectors.DetectorHOG(mname, st.hog_analysis_size, st.hog_winstride,
                           st.hog_scale)
            else:
                zm_util.debug("{:s} is not a valid detection model.".format(ms["detection_model"]),
                              "stderr")
                zmapi.logout()
                sys.exit(1)
            check = detector.initializeNetwork()
            check1 = detector.readClasses(classes_path)
            if not check or not check1:
                zm_util.debug("There was an error setting up detector for {:s}.".format(mname),
                              "stderr")
                sys.exit(1)

        # Append to the list
        if ms["check_events"]:
            monitors.append(Monitor(mname, mid, zmapi, detector, ms["detect_objects"],
                            ms["detect_in"],ms["score_treshold"]))
        else:
            zm_util.debug("Not appending monitor {:s} because check_events is False.".format(mname))

    ################################################################################################
    # Main loop
    ################################################################################################
    last_status = "Not running"
    last_runstate = "__None__"
    while True:
        sys.stdout.flush()
        sys.stderr.flush()

        # If ZoneMinder is not running, pause and start over
        if not zmapi.getDaemonStatus():
            if last_status == "Running":
                zm_util.debug("ZoneMinder is no longer running.")
                last_status = "Not running"
            time.sleep(st.stopped_timeout)
            continue

        # Get the active runstate
        runstates = zmapi.getRunStates()
        active_runstate = "__None__"
        for runstate in runstates:
            if runstate["active"]:
                active_runstate = runstate["name"]
                break
        if active_runstate != last_runstate:
            zm_util.debug("ZoneMinder is now in {:s} state.".format(active_runstate))
            last_runstate = active_runstate

        # Check if ZoneMinder is in the runstate for no notifications
        notify = True
        if st.no_notification_runstate != "":
            if active_runstate == st.no_notification_runstate:
                notify = False

        # Update status if needed
        if last_status == "Not running":
            zm_util.debug("ZoneMinder is now running.")
            last_status = "Running"

            # Pause to ensure the monitors' active statuses are set by the time we query
            time.sleep(5)

            # Update the active status and last event for all monitors
            for monitor in monitors:
                monitor.checkActive()
                monitor.getNewEvent()



        # Loop through all monitors to check for new events
        for monitor in monitors:
            if not monitor.active:
                # Check if previously inactive monitor has become active, then continue to the next
                # monitor.
                monitor.checkActive()
                continue

            # A monitor may have dropped out since the last time we checked
            if not monitor.checkActive():
                zm_util.debug("Warning: monitor {:s} has dropped out.".format(monitor.name),
                              "stderr")
                continue



            # Check for new event
            monitor.getNewEventPicturesList()
            for one_frame in monitor.EventPicturesList:
                frame, objclass, confidence = monitor.detectObjects(one_frame)

                # Set some data for the message
                eventid = one_frame[monitor.EVENT_ID_POSITION]
                event_url = "" # TODO zmapi.getEventURL(eventid)
                msg_head = "Motion detected, {:s}, event {:d}.".format(monitor.name, eventid)
                #zm_util.debug(msg_head)
                msg_head += "\n" + event_url
                msg_detect ="*** Detected {:s} *** confidence {:.2f}"

                if frame is not None and notify:
                    # Send notifications. Possible situations:
                    # 1) detection on and object detected -> send message
                    # 2) detection on and no object detected ->
                    #    a) If notify_no_object, send anyway
                    #    b) Otherwise, ignore this event
                    # 3) detection off -> send notification
                    if monitor.detect_objects:
                        # Send notifications if we detected something
                        if objclass != "":
                            # Scale and save the image to send in the notification
                            frame = resize_image(frame, st.analysis_image_size, preserve_aspect=True)
                            tmp_analysis_filenames = f"{st.tmp_analysis_image[:-4]}_{eventid}_{one_frame[monitor.FRAME_ID_POSITION]}"
                            cv2.imwrite(tmp_analysis_filenames+".jpg", frame)
                            msg_detect = msg_detect.format(objclass, confidence)
                            zm_util.debug(msg_detect)
                            msg = msg_head + "\n" + msg_detect
                            notifier.sendNotifications(msg, st.to_addresses, st.pushover_data, tmp_analysis_filenames)
                        else:
                            zm_util.debug("No objects detected in event {:d}.".format(eventid))
                            # Send notifications even with no detections if requested
                            if st.notify_no_object:
                                notifier.sendNotifications(msg_head, st.to_addresses,
                                                           st.pushover_data)

                    # Send notifications if object detection is off
                    else:
                        notifier.sendNotifications(msg_head, st.to_addresses, st.pushover_data)
                else:
                    if frame is None:
                        zm_util.debug("No image. Skipping event {:d}.".format(eventid), "stderr")
                    elif not notify:
                        try:
                            msg = "In {:s} state; not sending notifications.".format(active_runstate)
                            zm_util.debug(msg)
                        except Exception as e:
                            zm_util.debug("Error : {}.".format(e), "stderr")

        # Wait for the next cycle
        time.sleep(st.running_timeout)

    ################################################################################################
    # Cleanup. We'll never get here, but we'll leave it in case a graceful stop feature is added.
    ################################################################################################
    zmapi.logout()
